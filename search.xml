<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何使用使用Git</title>
      <link href="2021/03/13/howtousegit/"/>
      <url>2021/03/13/howtousegit/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>本篇文章将简单的介绍git的用法</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><strong>Git for windows</strong></p><p><a href="https://npm.taobao.org/mirrors/git-for-windows/v2.31.0-rc2.windows.1/Git-2.31.0-rc2-64-bit.exe">https://npm.taobao.org/mirrors/git-for-windows/v2.31.0-rc2.windows.1/Git-2.31.0-rc2-64-bit.exe</a></p><p>双击，然后一直下一步即可</p><h2 id="使用Git"><a href="#使用Git" class="headerlink" title="使用Git"></a>使用Git</h2><p>在某目录内右键选择</p><blockquote><p>Git Bash Here</p></blockquote><p>然后出来一个黑框框，还有路径，现在就可以使用git了</p><h2 id="配置Git用户名和密码"><a href="#配置Git用户名和密码" class="headerlink" title="配置Git用户名和密码"></a>配置Git用户名和密码</h2><p>输入</p><p><code>git config --global user.name &quot;用户名&quot;</code></p><p><code>git config --global user.name &quot;邮箱&quot;</code></p><p>用户名指可以登录的那个”账号”而非”昵称”</p><h2 id="生成ssh秘钥"><a href="#生成ssh秘钥" class="headerlink" title="生成ssh秘钥"></a>生成ssh秘钥</h2><p>git依赖于ssh进行通讯，所以要生成ssh秘钥</p><p><code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code></p><p>出来选项按回车键就可以，出来一串图案就代表已经生成完成</p><hr><p>生成的秘钥存于</p><p>C:\Users\Administrator.ssh</p><p>Administrator指当前的用户，请选择你当前的用户</p><p>目录下的id_rsa.pub文件即为公钥</p><p><b>本文永久链接：</b> <a href="https://kansamu.com/2021/03/13/howtousegit/">https://kansamu.com/2021/03/13/howtousegit/</a> <br><b>文章版权遵循： </b><a href="https://creativecommons.org/licenses/by/4.0/" target_blank>Creative Commons license 4.0</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的开始！Hexo</title>
      <link href="2021/02/25/HelloHexo/"/>
      <url>2021/02/25/HelloHexo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="事情缘由"><a href="#事情缘由" class="headerlink" title="事情缘由"></a>事情缘由</h2><p>在之前高三疫情在家复习期间，空闲之余有意搭建一个自己的个人博客来写点东西。</p><p>因为手里也莫得什么钱，也不是很喜欢那种虚拟主机，考虑到想学习学习Linux和搭环境，最后买了阿里云的学生机来搭建博客。</p><p>一开始选择的最老牌的WordPress，但是1M的小水管属实用着不是特别的舒服，而且对于我这个初学者来说，wordpress十分的复杂。如果使用的主题文档又比较缺失的情况下，我想修改一些我想去修改的地方是十分困难的。复杂的系统加上对于我的低带宽机器，最后我选择了typecho。</p><p>尽管社区不那么丰富，但是凭借typecho的简洁，我的使用体验十分的良好。相关的必备资源还是可以找到，而且主题文档非常的简单与明确，我能简单的修改一些东西，所以我搭建起了一个基于typecho的博客。</p><blockquote><p>其实还是非常喜欢typecho这个项目的！</p></blockquote><p>大一上学期也是因为疫情原因开学被推迟了，所以整个学期的时间被严重的压缩，一周上六天课，每天的课也排的超级满，周日休息一天也蛮多的活动。</p><p>这就导致我在上学期基本都在上课和参加各种活动，没有更新一篇文章，其实实践了一些项目都可以写一篇文章出来的，但是真的太忙了。</p><p>在2020年，我用的集成环境-宝塔，频繁被曝出各种问题，整个web所需要的php nginx MySQL等也需要更新维护，服务器的费用也是一笔支出</p><p>现在下学期马上要开学，还不知道课程的安排，如果我这学期还没有时间的话，各种维护对我来说是一种负担。</p><p>所以决定使用Hexo，然后使用Github的服务，静态网站不会出现任何问题，我也不需要担心一些服务器带来的问题了</p><h2 id="一些过程"><a href="#一些过程" class="headerlink" title="一些过程"></a>一些过程</h2><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><p>在去年开学前就接触过一些Hexo，当时还写了篇文章来着，用travisci来自动构建。</p><p>不过当时还是自己写了一个和本地操作一模一样的脚本来着，也是因为那个脚本，我修改了一些配置，导致我很难维护之前那个仓库。</p><p>本来打算直接搬运文章来着。但是翻看Hexo的文档，发现官方有一个CI的教程和脚本，直接拿来用就行。配置简化了以后，我没有在CI上花很多的时间</p><p>修改了主题的页头和页脚，修改了一些细节，大体上还是非常的满意。</p><h3 id="使用CDN"><a href="#使用CDN" class="headerlink" title="使用CDN"></a>使用CDN</h3><p>Github pages在国内访问速度还是挺慢的，于是在国内用了cdn，域名解析两条线路，境内走cdn，境外就直接访问github了。两边速度都挺不错！</p><p>考虑过境外使用cloudflare，但其实github自己就有cdn，在境外访问的速度非常快，而且也不用担心流量攻击，所以就没有加cloudflare。</p><p>不过Hexo只能采用第三方评论系统，所以国内是看不见我站的评论系统，而且因为一直加载不出来第三方评论，在浏览器上会一直转圈转圈。</p><p>大概看我Blog的人都有看见第三方评论的能力吧。。。。</p><p>看不到的话也没关系，反正我的小站也没多少人来评论。。。。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>做完这些我也马上要开学了，希望咱有时间多写几篇文章叭，还想在blog上加一些友链之类的功能，但是这个主题并没有写，hexo也没有插件轮子，所以有时间了打算用自己拙劣的手法来写一个纯手工的页面放友链好了= =</p><p><b>本文永久链接：</b> <a href="https://kansamu.com/2021/02/25/HelloHexo/">https://kansamu.com/2021/02/25/HelloHexo/</a> <br><b>文章版权遵循： </b><a href="https://creativecommons.org/licenses/by/4.0/" target_blank>Creative Commons license 4.0</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>或许是比WordPress更好的选择——Typecho</title>
      <link href="2020/09/06/typecho/"/>
      <url>2020/09/06/typecho/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>WordPress无疑是优秀的Web程序，那么有没有东西能够分一杯羹呢？ </p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为手里还有一台服务器，所以打算搭建一个动态博客练练手</p><p>在程序的选择上，在typecho和wordpress我都做了尝试</p><p>最终选择了typecho</p><h2 id="易用性"><a href="#易用性" class="headerlink" title="易用性"></a>易用性</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>无论是wordpress还是typecho，都是十分便于安装的，你只需要配置好环境，然后就能进入安装向导。</p><p>在安装向导内填入数据库信息和初始的管理账号，就可以完成安装，十分的简洁和友好。</p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>这一点，我是十分认同Typecho的，功能不多，但是该有的统统都有，很简洁和易用。</p><p>在我使用wordpress的时候，过于繁杂的功能和设置有点让我晕头转向。</p><p>我只是想搭建一个博客网站，只要能写文章就足够了，更多的东西我不太需要</p><p>很多时候只拥有基础功能是很棒的，typecho在这点上很和我心意。</p><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p>仅仅从搭建一个博客的角度来说，能够容易的书写文章是很关键的</p><p>在写一些教学类文章时，我们往往要使用各种代码框，引用框，加粗，超链接</p><p>通过这些来使文章更容易阅读和引用一些外部资源</p><p>在写作一个教程类文章时，大纲的存在就显得尤为重要</p><p>markdown语法可以通过标题来自动输出文章目录</p><p>而且语法是易用的，它并不像html那么的复杂，而是很简单和易用</p><p>我们可以使用类似于typora这样的编辑器在本地书写文章，而不必在浏览器书写</p><p>这样可以获得更好的书写体验。</p><p>从编辑器，以及写文章这一角度来说，typecho是更加优秀的。</p><h2 id="社区和生态"><a href="#社区和生态" class="headerlink" title="社区和生态"></a>社区和生态</h2><p>这一点来说，typecho是落后的，typecho的社区远不如wordpress活跃</p><p>相关的插件以及主题模板也是比较落后的</p><p>除了常用功能的插件，我们如果有什么想法，那么往往只能自己去开发插件</p><p>但是，从我的使用来看，一些基础的功能还是有巨人为我们提供了肩膀</p><p>我们能找到一些插件和主题，尽管数量并不多</p><p>例如插入音乐，向百度提交链接，内置图床，我们还是可以找到可以用的插件</p><p>来实现这些功能</p><p><b>本文永久链接：</b> <a href="https://kansamu.com/2020/09/06/typecho/">https://kansamu.com/2020/09/06/typecho/</a> <br><b>文章版权遵循： </b><a href="https://creativecommons.org/licenses/by/4.0/" target_blank>Creative Commons license 4.0</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> 测评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础搭建专属皮肤站实现皮肤托管和外置登录</title>
      <link href="2020/09/01/BuildBlessingSkinServer/"/>
      <url>2020/09/01/BuildBlessingSkinServer/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>通过BlessingSkin实现皮肤加载和可管理外置登录，便利的管理玩家账号<span id="more"></span></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>非在线模式服务器的问题</strong> </p><p>玩家皮肤和披风的加载一直是非在线模式Minecraft服务器的问题。</p><p>使用LitterSkin等大型皮肤站来加载皮肤难免会出现一些因为ID重复而造成的问题</p><p>同样，登录插件不便于玩家和管理员对账号进行管理，还会出现忘记密码难以找回，程序批量注册小号等</p><p>现在，我们可以解决这些问题了，通过BlessingSkinServer+authlib-injector的组合</p><p><strong>实现的功能</strong></p><p>在Web端通过邮箱注册账号，可使用谷歌验证码拦截机器注册</p><p>玩家可自己通过邮箱修改密码，全程在Web端可视化进行</p><p>提供上传，托管，游戏内加载皮肤和披风的功能</p><p>可选择插件提供邀请码功能限制注册</p><hr><h2 id="环境及程序准备"><a href="#环境及程序准备" class="headerlink" title="环境及程序准备"></a>环境及程序准备</h2><h3 id="主机环境"><a href="#主机环境" class="headerlink" title="主机环境"></a>主机环境</h3><p><strong><u>本教程使用Centos8.0.1905，强烈建议使用linux系统</u></strong></p><p><strong>Linux或windows环境</strong></p><blockquote><p>强烈建议使用Linux环境，本教程使用宝塔面板，全程可视化界面操作</p><p>不支持虚拟主机</p></blockquote><p>拥有独立ip或共享ip的很多个端口</p><blockquote><p>国内的主机需要备案才能使用80/443端口</p></blockquote><p>可用内存至少为1GB，上行带宽1M即可</p><h3 id="程序准备"><a href="#程序准备" class="headerlink" title="程序准备"></a>程序准备</h3><p><strong>BlessingSkinServer</strong></p><p><a href="https://github.com/bs-community/blessing-skin-server">https://github.com/bs-community/blessing-skin-server</a></p><p><strong>authlib-injector</strong></p><p><a href="https://github.com/yushijinhun/authlib-injector">https://github.com/yushijinhun/authlib-injector</a></p><blockquote><p> 下载地址在旁边的release里面，你应该下载的是zip或者jar文件</p></blockquote><p><strong>任意的ssh终端来使用linux主机</strong></p><hr><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="安装集成环境"><a href="#安装集成环境" class="headerlink" title="安装集成环境"></a>安装集成环境</h3><p>集成环境可以省去我们学习配置环境的麻烦</p><p>对于新手以及小白较为友好，本文使用宝塔集成环境进行教学</p><p>宝塔面板官网 <a href="https://www.bt.cn/">https://www.bt.cn/</a></p><p><strong>Centos安装宝塔</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><p><strong>Ubuntu/Deepin安装宝塔</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh</span><br></pre></td></tr></table></figure><blockquote><p>其他linux发行版请前往宝塔官网自行查看。windows环境前往官网下载.exe文件安装即可</p></blockquote><p><u>安装完成即在ssh终端输出面板地址和初始用户名和密码</u></p><p><u>建议修改端口和面板入口避免被暴力破解</u></p><hr><h3 id="安装php和Web程序"><a href="#安装php和Web程序" class="headerlink" title="安装php和Web程序"></a>安装php和Web程序</h3><p>前往宝塔面板的软件商店安装以下运行环境</p><ul><li>PHP7.4</li><li>Nginx1.19</li><li>MySQL5.7</li><li>phpMyAdmin5.0</li></ul><blockquote><p>强烈建议使用编译安装获取更新版本以及更好的安全性</p></blockquote><p><a href="https://s1.ax1x.com/2020/09/04/wAN7VS.png" class="gallery-item"><img src="https://s1.ax1x.com/2020/09/04/wAN7VS.png"></a></p><hr><h3 id="新建站点和数据库"><a href="#新建站点和数据库" class="headerlink" title="新建站点和数据库"></a>新建站点和数据库</h3><p><u>添加站点</u></p><p>前往网站选择添加站点并添加域名</p><p><strong>在域名处填写你的网站域名</strong></p><p><strong>在此之前请前往域名服务商处将域名解析a记录到你的公网ip</strong></p><p><a href="https://s1.ax1x.com/2020/09/04/wANb5Q.png" class="gallery-item"><img src="https://s1.ax1x.com/2020/09/04/wANb5Q.png"></a></p><hr><p><u>新建数据库</u></p><p>前往数据库选择添加数据库</p><p>填入数据库名，用户名和密码</p><p><strong>数据库编码我们选择utf8mb4</strong></p><blockquote><p>这是mysql的一个历史问题，utf8mb4才能兼容四字节的unicode</p></blockquote><p><strong>如果你没有特殊需求，访问权限请选择本地服务器</strong></p><p><a href="https://s1.ax1x.com/2020/09/04/wAaFw8.png" class="gallery-item"><img src="https://s1.ax1x.com/2020/09/04/wAaFw8.png"></a></p><hr><p><u>上传皮肤站程序</u></p><p>前往网站的根目录，一般情况是以你域名为名的文件夹</p><p>删除原来的index.html和404文件</p><p>上传你下载的BlessingSkinserver压缩包</p><p>然后点击解压来解压它</p><p><a href="https://s1.ax1x.com/2020/09/04/wANob8.png" class="gallery-item"><img src="https://s1.ax1x.com/2020/09/04/wANob8.png"></a></p><hr><h3 id="配置BS所需环境"><a href="#配置BS所需环境" class="headerlink" title="配置BS所需环境"></a>配置BS所需环境</h3><h4 id="解除函数禁用"><a href="#解除函数禁用" class="headerlink" title="解除函数禁用"></a>解除函数禁用</h4><p>宝塔面板默认禁用了一些我们需要的php函数，我们需要解除禁用</p><p>入口在软件商店，已安装，php7.4，点击设置，找到禁用函数</p><ul><li><code>symlink</code></li><li><code>readlink</code></li><li><code>putenv</code></li><li><code>realpath</code></li></ul><blockquote><p>请确保以上函数解除禁用，通常情况下可以解除所有的函数禁用</p></blockquote><p><a href="https://s1.ax1x.com/2020/09/04/wANHUg.png" class="gallery-item"><img src="https://s1.ax1x.com/2020/09/04/wANHUg.png"></a></p><hr><h4 id="安装php拓展"><a href="#安装php拓展" class="headerlink" title="安装php拓展"></a>安装php拓展</h4><p>BlessingSkin运行需要以下拓展</p><ul><li>OpenSSL</li><li>PDO</li><li>Mbstring</li><li>Tokenizer</li><li>GD</li><li>XML</li><li>Ctype</li><li>JSON</li><li>fileinfo</li><li>zip</li></ul><p><strong>使用宝塔面板，我们只需要额外安装fileinfo拓展即可</strong></p><p><a href="https://s1.ax1x.com/2020/09/04/wAN5KP.png" class="gallery-item"><img src="https://s1.ax1x.com/2020/09/04/wAN5KP.png"></a></p><hr><h4 id="修改Nginx配置"><a href="#修改Nginx配置" class="headerlink" title="修改Nginx配置"></a>修改Nginx配置</h4><p>请打开网站一栏，点击设置</p><p>找到配置文件，如图所示，删除其中的png规则</p><p>删除完的配置文件应该为这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*\.(gif|jpg|jpeg|bmp|swf)$</span><br><span class="line">    &#123;</span><br><span class="line">        expires      30d;</span><br><span class="line">        error_log off;</span><br><span class="line">        access_log &#x2F;dev&#x2F;null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a href="https://s1.ax1x.com/2020/09/04/wANO8s.png" class="gallery-item"><img src="https://s1.ax1x.com/2020/09/04/wANO8s.png"></a></p><hr><h4 id="配置伪静态规则"><a href="#配置伪静态规则" class="headerlink" title="配置伪静态规则"></a>配置伪静态规则</h4><p>请在伪静态一栏填入以下伪静态规则</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://s1.ax1x.com/2020/09/04/wANLCj.png" class="gallery-item"><img src="https://s1.ax1x.com/2020/09/04/wANLCj.png"></a></p><hr><h4 id="修改运行目录"><a href="#修改运行目录" class="headerlink" title="修改运行目录"></a>修改运行目录</h4><p><strong>请务必取消防跨站攻击选项</strong></p><p><strong>请务必取消防跨站攻击选项</strong></p><p><strong>请务必取消防跨站攻击选项</strong></p><p><strong>然后在运行目录填入/public</strong></p><p><a href="https://s1.ax1x.com/2020/09/04/wADmqI.png" class="gallery-item"><img src="https://s1.ax1x.com/2020/09/04/wADmqI.png"></a></p><hr><h4 id="复制配置文件"><a href="#复制配置文件" class="headerlink" title="复制配置文件"></a>复制配置文件</h4><p>请打开ssh终端，切换到网站根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;www&#x2F;wwwroot&#x2F;你的域名</span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp .env.example .env</span><br></pre></td></tr></table></figure><p><a href="https://s1.ax1x.com/2020/09/04/wANIDf.png" class="gallery-item"><img src="https://s1.ax1x.com/2020/09/04/wANIDf.png"></a></p><p>windoows用户复制一份<code>.env.example</code>并重命名为<code>.env</code>即可</p><p>一般情况下你是在root用户下执行的cp命令，所以<code>.env</code>的所有者会是root</p><p>这会导致无法安装，请确保所有皮肤站的文件所有者为www，权限为755</p><p><a href="https://s1.ax1x.com/2020/09/04/wANzrV.png" class="gallery-item"><img src="https://s1.ax1x.com/2020/09/04/wANzrV.png"></a></p><hr><h4 id="生成AppKey"><a href="#生成AppKey" class="headerlink" title="生成AppKey"></a>生成AppKey</h4><p><code>APP_KEY</code> 被用于加密 Session 等数据，对 Blessing Skin 来说是不可缺少的。</p><p>请执行以下命令生成 app key：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan key:generate</span><br></pre></td></tr></table></figure><p>如果没有生成 app key，访问页面时会出现「No application encryption key has been specified.」的错误提示</p><p><a href="https://s1.ax1x.com/2020/09/04/wANX2n.png" class="gallery-item"><img src="https://s1.ax1x.com/2020/09/04/wANX2n.png"></a></p><hr><h3 id="完成安装"><a href="#完成安装" class="headerlink" title="完成安装"></a>完成安装</h3><p>如果你完成了上述所有操作，现在访问你的网站应该是这样</p><p><a href="https://s1.ax1x.com/2020/09/04/wANxK0.png" class="gallery-item"><img src="https://s1.ax1x.com/2020/09/04/wANxK0.png"></a></p><p><strong>请按照指示填写信息即可完成安装</strong></p><hr><h2 id="实现外置登录"><a href="#实现外置登录" class="headerlink" title="实现外置登录"></a>实现外置登录</h2><h3 id="BS皮肤站部分"><a href="#BS皮肤站部分" class="headerlink" title="BS皮肤站部分"></a>BS皮肤站部分</h3><p>BlessingSkinServer提供了一个插件市场</p><p>我们可以通过安装插件实现很多功能，比如外置登录</p><p>我们前往bs的插件市场</p><p>安装<strong>Yggdrasil API</strong>，并在插件管理中启用</p><p><a href="https://s1.ax1x.com/2020/09/05/wEkNTS.png" class="gallery-item"><img src="https://s1.ax1x.com/2020/09/05/wEkNTS.png"></a></p><p>启用后，在用户中心的首页便会出现<strong>认证服务器地址</strong></p><p><a href="https://s1.ax1x.com/2020/09/05/wEEkb6.png" class="gallery-item"><img src="https://s1.ax1x.com/2020/09/05/wEEkb6.png"></a></p><hr><p>bs作为一个皮肤站程序，提供了单账号多角色的功能</p><p>但是作为一个服务器的专属皮肤站，我们可以通过安装插件来关闭这个功能</p><p>我们在插件市场，安装<strong>单角色限制</strong>插件，这样一个邮箱只能拥有一个角色了</p><p><a href="https://s1.ax1x.com/2020/09/05/wEk7m6.png" class="gallery-item"><img src="https://s1.ax1x.com/2020/09/05/wEk7m6.png"></a></p><hr><h3 id="MC服务端部分"><a href="#MC服务端部分" class="headerlink" title="MC服务端部分"></a>MC服务端部分</h3><p>我们需要下载<strong>authlib-injector</strong></p><p>地址<a href="https://authlib-injector.yushi.moe/">https://authlib-injector.yushi.moe/</a></p><p>下载到的<strong>authlib-injector</strong>应放置在服务端的根目录内，并添加以下服务端启动启动参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:&#123;authlib-injector.jar 的路径&#125;=&#123;验证服务器 URL (API 地址)&#125;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:&#123;authlib-injector-1.1.32.jar&#125;&#x3D;&#123;https:&#x2F;&#x2F;skin.xiamengwuyu.cn&#x2F;api&#x2F;yggdrasil&#125; -jar CatServer-20c1883-universal.jar</span><br></pre></td></tr></table></figure><blockquote><p>第一个大括号内填写authlib-injector的路径</p><p>如果你的authlib-injector.jar和启动脚本位于同一目录，直接填写文件名即可</p><p>第二个大括号内填写认证服务器地址</p></blockquote><p><a href="https://s1.ax1x.com/2020/09/05/wEKoX4.png" class="gallery-item"><img src="https://s1.ax1x.com/2020/09/05/wEKoX4.png"></a></p><hr><h3 id="MC客户端部分"><a href="#MC客户端部分" class="headerlink" title="MC客户端部分"></a>MC客户端部分</h3><p>请使用支持外置登录的Minecraft启动器</p><p>HMCL是对外置登录支持比较好的启动器</p><p>这里以HMCL启动器演示 <strong>HMCL</strong> <a href="https://github.com/huanghongxun/HMCL">https://github.com/huanghongxun/HMCL</a></p><ol><li>直接在皮肤站上拖动按钮到hmcl启动器</li><li>手动输入地址登录</li></ol><p><b>本文永久链接：</b> <a href="https://kansamu.com/2020/09/01/BuildBlessingSkinServer/">https://kansamu.com/2020/09/01/BuildBlessingSkinServer/</a> <br><b>文章版权遵循： </b><a href="https://creativecommons.org/licenses/by/4.0/" target_blank>Creative Commons license 4.0</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> 技术,Minecraft </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一部重刷数次的电影《天気の子》</title>
      <link href="2020/08/29/WeatheringWithYou/"/>
      <url>2020/08/29/WeatheringWithYou/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>失控吧，就算这个世界就此不再放晴也无所谓！只要有阳菜小姐就好了！<span id="more"></span></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="WeatheringWithYou"><a href="#WeatheringWithYou" class="headerlink" title="WeatheringWithYou"></a>WeatheringWithYou</h3><p>正如英文翻译一样，天気の子讲述了一个天气和你的故事。</p><p>从梦境的指引来到东京，到不顾一切的拯救你。</p><p>这是一个标准的新海诚笔下的剧情。</p><hr><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="我真的更喜欢音乐"><a href="#我真的更喜欢音乐" class="headerlink" title="我真的更喜欢音乐"></a>我真的更喜欢音乐</h3><p>在此之前，我只看过新海诚的<em>君の名は</em>。</p><p>除了精美的画面，给我留下深刻印象的便是音乐，电影的成功是绝对离不开音乐的。</p><p><em>君の名は</em>中的<strong>スパークル</strong>（火花）以及<strong>なんでもないや</strong>（没什么大不了的），<strong>前前前世</strong>。</p><p>我的印象是非常深刻的，恰到好处的出现对画面进行了良好的气氛烘托。</p><p>BGM在<em>天気の子</em>中的穿插我感觉是更加棒了，相比于<em>君の名は</em>来说，<em>天気の子</em>中运用了更多的音乐</p><p>在主题曲<strong>愛にできることはまだあるかい</strong>出现在帆高在铁路上奔跑向废弃大楼上时，</p><p>我认为比电影刻意营造的真正的高潮<strong>グランドエスケープ</strong>（逃离地面）更加对人有影响力</p><p><a href="https://cdn.jsdelivr.net/gh/kansamu/kansamu@v1.1/pic/weatheringwithyou/one.png" class="gallery-item"><img src="https://cdn.jsdelivr.net/gh/kansamu/kansamu@v1.1/pic/weatheringwithyou/one.png"></a></p><hr><h3 id="逐渐圆满的结尾"><a href="#逐渐圆满的结尾" class="headerlink" title="逐渐圆满的结尾"></a>逐渐圆满的结尾</h3><p>终于，在天气之子的结尾，我们的帆高和阳菜完美的相遇了。</p><p>从秒速五厘米到言叶之庭，再到你的名字。</p><p>在天气之子，男主和女主实现了一个团圆。</p><p>这是一个完全能预想到的结局，甚至说，有点俗套。</p><p>但是如果是新海诚的老粉，一定会对这种圆满而欣喜。</p><p>因为前几部，都没有这样一个美好的结局。</p><h3 id="老实说有点俗套的剧情"><a href="#老实说有点俗套的剧情" class="headerlink" title="老实说有点俗套的剧情"></a>老实说有点俗套的剧情</h3><p>相遇，矛盾，团圆</p><p>老实说，有点俗套</p><p>因为剧情就是按部就班的一直推进</p><p>你总能想到下一步是什么，而不是给你一个惊喜或者反转</p><p>可能唯一的惊喜是帆高在酒吧门口捡到一把手枪吧</p><p>可是这个手枪又变成了完美的铺垫</p><p><b>本文永久链接：</b> <a href="https://kansamu.com/2020/08/29/WeatheringWithYou/">https://kansamu.com/2020/08/29/WeatheringWithYou/</a> <br><b>文章版权遵循： </b><a href="https://creativecommons.org/licenses/by/4.0/" target_blank>Creative Commons license 4.0</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用TravisCI自动生成Hexo静态网页</title>
      <link href="2020/08/26/UesTravisBuildHexoWeb/"/>
      <url>2020/08/26/UesTravisBuildHexoWeb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p> 本篇文章内容是让Hexo实现跨平台跨设备和浏览器环境下修改你的网站。<span id="more"></span></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="Hexo存在的问题"><a href="#Hexo存在的问题" class="headerlink" title="Hexo存在的问题"></a>Hexo存在的问题</h3><p>使用Hexo这个node_js程序来生成静态网站是无疑十分方便的，仅仅在本地执行一行<code>Hexo g</code>便可生成一个完整的静态网站。</p><p>你可以把静态网站上传到个个服务商的对象存储又或者是Github，Gitee这样的提供静态网站托管的平台来部署一个静态的网站。</p><p>和wordpress之类的动态web程序把程序运行在服务端相比，Hexo的程序在本地。</p><p>这就造成了一个问题。<strong>我们想要发布一篇新文章亦或是对Blog进行修改只能在有程序的设备上</strong>。</p><p>我们需要Node_js环境以及单独属于这个网站的Hexo程序。如果你的主题还需要额外的node_js依赖，需要的环境便更加复杂。</p><p>可是动态博客可以在任意浏览器环境进行发布或者对博客的更改。如果Hexo部署在本地是不能这样做的。</p><p>本篇文章<strong>内容便是让Hexo实现跨平台和跨设备，甚至是浏览器环境下修改你的网站。</strong></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><strong><u>请注意！阅读本文需要接触过命令行以及有一定的计算机基础。遇到问题请善用搜索引擎</u></strong></p><ul><li>一个搭建完毕的Hexo框架</li><li>一个Github账号</li><li>一个Git程序</li></ul><blockquote><p>关于Hexo的搭建：Hexo官网有详细的文章，在互联网上也有很多相关的资料。本文不再赘述。</p></blockquote><hr><h3 id="将Hexo放在Github上"><a href="#将Hexo放在Github上" class="headerlink" title="将Hexo放在Github上"></a>将Hexo放在Github上</h3><p><strong>本文使用Windows环境进行讲解</strong></p><h4 id="新建Github仓库"><a href="#新建Github仓库" class="headerlink" title="新建Github仓库"></a>新建Github仓库</h4><p>打开<a href="Github.com">Github</a>,新建一个repositories，将仓库名命名为<strong>username.github.io</strong></p><p><a href="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/QQ%E6%88%AA%E5%9B%BE20200826215210.png" class="gallery-item"><img src="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/QQ%E6%88%AA%E5%9B%BE20200826215210.png"></a></p><p><a href="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.2/img/QQ%E6%88%AA%E5%9B%BE20200826215337.png" class="gallery-item"><img src="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.2/img/QQ%E6%88%AA%E5%9B%BE20200826215337.png"></a></p><blockquote><p>username即为你的Github用户名，注意是可以登录使用的用户名而非昵称。</p></blockquote><p>将仓库Clone到本地</p><p>右键一个合适的目录，选择Git bash here</p><p>输入Git clone  仓库地址</p><p><a href="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/20200826222222.png" class="gallery-item"><img src="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/20200826222222.png"></a></p><blockquote><p><strong>请注意！</strong> 你可以选择http和ssh两种方式进行连接。http方式需要输入github账号和密码，ssh方式则是生成密钥。关于设置ssh密钥方式请自行学习。参考链接<a href="!%5B%5D(https://raw.githubusercontent.com/ZaoyuanMoe/zaoyuanmoe/master/img/20200826222222.png)">百度百科</a>。</p><p>当然你也可以选择http方式进行clone，看清复制是那种链接即可。</p></blockquote><hr><h4 id="部署Hexo到github仓库"><a href="#部署Hexo到github仓库" class="headerlink" title="部署Hexo到github仓库"></a>部署Hexo到github仓库</h4><p>完整的复制你的hexo所有的文件到clone下的文件夹内</p><p>通常情况下，一个完整的Hexo应该是长这样的，请复制所有内容到clone下的仓库根目录</p><p><a href="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/QQ20200826223230.png" class="gallery-item"><img src="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/QQ20200826223230.png"></a></p><p>接下来请在仓库目录内运行git bash here</p><p><a href="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/QQ20200826223604.png" class="gallery-item"><img src="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/QQ20200826223604.png"></a></p><p>正常情况下应该会有个（master），这代表你正在操作master分支</p><p>请执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;一段自定义的信息&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><blockquote><p><strong>请注意</strong>，如果你是第一次使用git，请配置git的用户名和密码</p><p>请执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name  &quot;username&quot;  </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email  &quot;email&quot;</span><br></pre></td></tr></table></figure><p>username即为你在github的用户名</p><p>email请使用你在github使用的邮箱之一</p></blockquote><p>这时你访问你的github仓库，就会发现你的hexo程序已经上传到了github</p><h3 id="创建用于存放静态网站的分支"><a href="#创建用于存放静态网站的分支" class="headerlink" title="创建用于存放静态网站的分支"></a>创建用于存放静态网站的分支</h3><h4 id="在本地创建分支"><a href="#在本地创建分支" class="headerlink" title="在本地创建分支"></a>在本地创建分支</h4><p>请执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure><p>这段命令的意思是创建了一个名为hexo的分支，当然，这个名字你可以用其他的</p><p>这时你输入<code>git branch</code>可以查看本地的分支</p><p><a href="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img//QQ20200826225134.png" class="gallery-item"><img src="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img//QQ20200826225134.png"></a></p><p>可以看到，你现在已经在hexo分支了，并且本地有两个分支，一个master，一个hexo</p><p>通过蓝色字体可以知道现在我们在hexo分支</p><h4 id="push新分支到github"><a href="#push新分支到github" class="headerlink" title="push新分支到github"></a>push新分支到github</h4><p><strong>请删除除了.git以外所有的文件和文件夹</strong></p><p>然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;初始化hexo分支&quot;</span><br></pre></td></tr></table></figure><p>现在我们已经完成了新建分支hexo</p><p>请切换回master分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>现在把新的hexo分支push到github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure><p>现在，你已经完成把和hexo分支上传到github，查看你的github会发现hexo分支已经出现</p><h3 id="配置Travis-CI与GithubPages"><a href="#配置Travis-CI与GithubPages" class="headerlink" title="配置Travis CI与GithubPages"></a>配置Travis CI与GithubPages</h3><h4 id="向TravisCI添加你的github仓库"><a href="#向TravisCI添加你的github仓库" class="headerlink" title="向TravisCI添加你的github仓库"></a>向TravisCI添加你的github仓库</h4><p>打开Travis <a href="https://travis-ci.com/">https://travis-ci.com/</a></p><p>点击右上角的sign选择sign with github，即使用github登录</p><p>在红圈的地方去github授权可以访问的仓库</p><p><a href="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/QQ%E6%88%AA%E5%9B%BE20200826230609.png" class="gallery-item"><img src="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/QQ%E6%88%AA%E5%9B%BE20200826230609.png"></a></p><h4 id="向TravisCI授予token"><a href="#向TravisCI授予token" class="headerlink" title="向TravisCI授予token"></a>向TravisCI授予token</h4><p>选择你的Github右上角头像，找到setting，在sitting的左栏最下面找到Developer setting</p><p>找到Personal access tokens</p><p>或者直接访问<a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p><p>新建一个token，note可以任意填写，但是这个名字一会要用，我填写为HexoCI</p><p><strong>勾选repo选项</strong></p><p><a href="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/20200826231759.png" class="gallery-item"><img src="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/20200826231759.png"></a></p><p>复制生成的token，前往TravisCI的<a href="https://travis-ci.com/account/repositories">Setting</a></p><p>点击右边所在仓库的setting，找到Environment Variables</p><p>在name项填入你刚才生成token的名称，我应该填写HexoCI</p><p>在Value填入你复制的token</p><p><a href="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/20200826232606.png" class="gallery-item"><img src="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/20200826232606.png"></a></p><h4 id="配置-travis-yml"><a href="#配置-travis-yml" class="headerlink" title="配置.travis.yml"></a>配置.travis.yml</h4><p>在你的本地仓库下创建一个名为.travis.yml的文件</p><p>填入以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line"></span><br><span class="line">node_js: stable </span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">    directorise:</span><br><span class="line">    - node_modules</span><br><span class="line"> </span><br><span class="line">install:</span><br><span class="line">    - npm install</span><br><span class="line">   </span><br><span class="line">script:</span><br><span class="line">    - hexo clean</span><br><span class="line">    - hexo g</span><br><span class="line">  </span><br><span class="line">after_script:</span><br><span class="line">    - cd .&#x2F;public</span><br><span class="line">    - git init</span><br><span class="line">    - git config user.name &quot;username&quot; # 在此填入你的github用户名</span><br><span class="line">    - git config user.email &quot;email&quot; # 在此填入你的github所用邮箱</span><br><span class="line">    - git add .</span><br><span class="line">    - git commit -m &quot;自动构建Hexo博客文章&quot;</span><br><span class="line">    - git push --force --quiet &quot;https:&#x2F;&#x2F;$&#123;HexoCI&#125;@$&#123;GH_REF&#125;&quot; master:hexo</span><br><span class="line">    # 请注意最后一行花括号内的HexoCI应填入你刚才生成的token名，我的是HexoCI</span><br><span class="line">branches:</span><br><span class="line">    only:</span><br><span class="line">    - master</span><br><span class="line">    # 触发自动构建的分支名称</span><br><span class="line">env:</span><br><span class="line">    global:</span><br><span class="line">    - GH_REF: github.com&#x2F;Kansamu&#x2F;Kansamu.github.io.git #在次填入你的仓库地址</span><br></pre></td></tr></table></figure><p>如何配置已在代码中进行注释，现再重复一遍</p><blockquote><ul><li>git config user.name “username” # 在此填入你的github用户名</li><li>git config user.email “email” # 在次填入你的github所用邮箱</li></ul></blockquote><p>对于此行配置</p><p><code>git push --force --quiet &quot;https://$&#123;HexoCI&#125;@$&#123;GH_REF&#125;&quot; master:hexo</code></p><p>HexoCI为你创建的token名</p><p>后面的master:hexo指从master分支push到hexo分支</p><p><code>GH_REF: github.com/Kansamu/Kansamu.github.io.git #在次填入你的仓库地址</code></p><p>请把kansamu/kansamu.github.io替换成你的用户名和你的仓库名称</p><p><strong>注意不要忘了结尾的.git</strong></p><hr><p>如果你是在本地仓库创建的，请push到github上</p><p>老生常谈的操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .travis.yml</span><br><span class="line">git commit -m &quot;create .travis.yml&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>请注意，请在本地仓库的master分支进行操作，.travis.yml应该存在于master分支。</p><h4 id="配置Github-pages"><a href="#配置Github-pages" class="headerlink" title="配置Github pages"></a>配置Github pages</h4><p>请在仓库的Setting中的github pages中切换分支为hexo</p><p><a href="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/20200826234842.png" class="gallery-item"><img src="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/20200826234842.png"></a></p><hr><h2 id="进阶内容"><a href="#进阶内容" class="headerlink" title="进阶内容"></a>进阶内容</h2><h3 id="关于主题suka的特殊配置"><a href="#关于主题suka的特殊配置" class="headerlink" title="关于主题suka的特殊配置"></a>关于主题suka的特殊配置</h3><p>我的博客使用的是Sukkaw开发的suka主题<a href="https://github.com/SukkaW/hexo-theme-suka">https://github.com/SukkaW/hexo-theme-suka</a></p><p>在进行部署自动构建的时候遇到了一些问题</p><p><a href="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/20200827001025.png" class="gallery-item"><img src="https://cdn.jsdelivr.net/gh/zaoyuanmoe/zaoyuanmoe@v1.3/img/20200827001025.png"></a></p><p><u><strong>可以看到，suka需要额外的依赖</strong></u></p><p>通过查看travis的build日志，我发现了缺少的依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  --------------------------------------------------------</span><br><span class="line"> ____        _           _____ _</span><br><span class="line">&#x2F; ___| _   _| | ____ _  |_   _| |__   ___ _ __ ___   ___</span><br><span class="line">\___ \| | | | |&#x2F; &#x2F; _&#96; |   | | | &#39;_ \ &#x2F; _ \ &#39;_ &#96; _ \ &#x2F; _ \</span><br><span class="line"> ___) | |_| |   &lt; (_| |   | | | | | |  __&#x2F; | | | | |  __&#x2F;</span><br><span class="line">|____&#x2F; \__,_|_|\_\__,_|   |_| |_| |_|\___|_| |_| |_|\___|</span><br><span class="line">hexo-theme-suka ( https:&#x2F;&#x2F;theme-suka.skk.moe )</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">INFO  Checking dependencies</span><br><span class="line">ERROR Package node-prismjs is not installed.</span><br><span class="line">ERROR Package qr-image is not installed.</span><br><span class="line">ERROR Please install the missing dependencies.</span><br><span class="line">ERROR You can enter suka-theme directory and run following commands:</span><br><span class="line">ERROR $ npm i --production</span><br><span class="line">ERROR $ yarn --production # If you prefer yarn.</span><br></pre></td></tr></table></figure><p>也就是suka这个主题需要这两个额外的依赖</p><ul><li>node-prismjs</li><li>qr-image</li></ul><p>在本地安装这个主题时，我只需要执行<code>npm install --production</code>来补全运行环境</p><p>所以我们要在.travis.yml里添加几行配置来安装这个依赖</p><p>使用npm包管理安装依赖十分简单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install 包名</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#在.travis.yml的script:项目额外添加的配置</span><br><span class="line">   - cd themes&#x2F;suka</span><br><span class="line">   - npm install node-prismjs</span><br><span class="line">   - npm install qr-image</span><br><span class="line">   - cd ..&#x2F;..</span><br></pre></td></tr></table></figure><p>同时，为了方便更新，suka这个主题本身就是一个仓库</p><blockquote><p>为了避免冲突，「Suka」中只有 <code>_config.example.yml</code>，<code>主题配置文件</code> 需要将 <code>_config.example.yml</code> 复制一份并重命名为 <code>_config.yml</code>。</p><p>为了防止开发中 <code>_config.yml</code> 被推送进 Repo 中，我们将 <code>_config.yml</code> 写入了 <code>.gitignore</code>。这意味着在使用 Git 管理 Hexo 站点文件时，<code>主题配置文件</code> 并不会被 Push 到 Repo 中。此时你需要将 <code>_config.yml</code> 从 <code>.gitignore</code> 中删除，注意这有可能会造成使用 <code>git pull</code> 更新「Suka」时造成冲突。</p></blockquote><p>我们需要手动这两个操作执行</p><p>在主题文件夹内的.gitignore内删除_config.yml</p><p>把你本地的主题_config.yml手动push到github</p><p><strong>思维发散</strong></p><p>我并不知道你用的是什么主题，但是我的这段经历可以给你很多思维启发</p><p>主题有额外的依赖，需要在.travis.yml中手动添加配置来使TravisCI可以构建</p><p>如果你的主题也是一个仓库，留意.gitignore</p><p>可能还会有其他地方，所有你的主题文档特殊提醒的地方，都值得你去注意</p><p><b>本文永久链接：</b> <a href="https://kansamu.com/2020/08/26/UesTravisBuildHexoWeb/">https://kansamu.com/2020/08/26/UesTravisBuildHexoWeb/</a> <br><b>文章版权遵循： </b><a href="https://creativecommons.org/licenses/by/4.0/" target_blank>Creative Commons license 4.0</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
